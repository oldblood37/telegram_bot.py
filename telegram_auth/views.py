# telegram_auth/views.py
import json
from django.shortcuts import render
import logging
import secrets
import hashlib
import requests
from django.http import HttpResponse, JsonResponse, HttpResponseNotAllowed
from django.views.decorators.csrf import csrf_exempt
from django.apps import AppConfig
from django.core.signals import request_started
from django.contrib.auth import login
from django.shortcuts import redirect
from .models import TelegramProfile, UserLogin, ParserSetting
from saite.models import City, TelegramGroup  # –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –∏–∑ saite
from django.contrib.auth.models import User
import secrets
from django.dispatch import receiver
from django.contrib.auth import logout
from django.views.decorators.http import require_POST

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


def logout_view(request):
    logout(request)
    return redirect('/')


class TelegramAuthConfig(AppConfig):
    name = 'telegram_auth'

    def ready(self):
        request_started.connect(set_webhook)


@receiver(request_started)
def set_webhook(**kwargs):
    print("Setting webhook...")
    try:
        response = requests.post(f"{TELEGRAM_API}{TELEGRAM_TOKEN}/setWebhook", data={'url': WEBHOOK_URL})
        logger.info("Webhook set successfully. Response: %s", response.json())
    except Exception as e:
        logger.error("Error setting webhook: %s", e)


TELEGRAM_API = 'https://api.telegram.org/bot'
TELEGRAM_TOKEN = '6794656536:AAHRrqdax_iANoWmeAeMbX6C_YomWgWxsDw'
WEBHOOK_URL = 'https://7f8c-178-76-218-138.ngrok-free.app/telegram-webhook'
BASE_URL = WEBHOOK_URL.rsplit('/', 1)[0]


def send_telegram_message(chat_id, text):
    send_url = f'{TELEGRAM_API}{TELEGRAM_TOKEN}/sendMessage'
    response = requests.post(send_url, data={'chat_id': chat_id, 'text': text})
    logger.info(f"Message send attempt to chat_id {chat_id} with response: {response.json()}")


def generate_and_save_user_token(telegram_profile):
    salt = secrets.token_hex(16)
    data_to_hash = f"{telegram_profile.chat_id}{salt}"
    token = hashlib.sha256(data_to_hash.encode()).hexdigest()
    telegram_profile.token = token
    telegram_profile.save()
    return token


def get_user_by_chat_id(chat_id):
    try:
        telegram_profile = TelegramProfile.objects.get(chat_id=chat_id)
        return telegram_profile.user
    except TelegramProfile.DoesNotExist:
        return None


def send_welcome_message(chat_id):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –¢–µ–ª–µ–≥—Ä–∞–º. "
        "–ù–∞ —Å–∞–π—Ç–µ —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—è, —á—Ç–æ–±—ã —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–∞–ª –¥–ª—è —Ç–µ–±—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞. "
        "–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö, —á—Ç–æ–±—ã —Ç—ã –≤—Å–µ–≥–¥–∞ –±—ã–ª –≤ –∫—É—Ä—Å–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–≥–æ! üéâ\n\n"
        "–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /vhod."
    )
    send_telegram_message(chat_id, welcome_text)


@require_POST
@csrf_exempt
def update_parser_settings(request):
    if not request.user.is_authenticated:
        return JsonResponse({'status': 'error', 'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}, status=403)

    user = request.user
    custom_settings = request.POST.get('custom-settings-checkbox') == 'on'
    city_id = request.POST.get('city')
    keywords = request.POST.get('keywords')
    excludes = request.POST.get('excludes')
    groups = request.POST.get('groups')

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    ParserSetting.objects.filter(user=user).delete()

    if custom_settings:
        print("proverka")
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –¥–ª—è –≥–æ—Ä–æ–¥–∞
        parser = ParserSetting.objects.create(
            user=user,
            city=None,
            keywords=keywords,
            excludes=excludes,
            groups=groups,
        )
    else:
        if not city_id:
            return JsonResponse({'status': 'error', 'message': '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'}, status=400)

        try:
            city = City.objects.get(id=city_id)
        except City.DoesNotExist:
            return JsonResponse({'status': 'error', 'message': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ—Ä–æ–¥'}, status=400)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º
        parser = ParserSetting.objects.create(
            user=user,
            city=city,
            keywords=keywords,
            excludes=excludes,
        )

    message = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã."
    if custom_settings:
        message += f" –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}, –∏—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞: {excludes}, –≥—Ä—É–ø–ø—ã: {groups}."
    else:
        message += f" –ì–æ—Ä–æ–¥: {city.name}, –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}, –∏—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞: {excludes}."

    telegram_profile = TelegramProfile.objects.get(user=user)
    send_telegram_message(telegram_profile.chat_id, message)

    return JsonResponse({'status': 'success', 'message': message})








@csrf_exempt
def telegram_webhook(request):
    if request.method == 'POST':
        data = json.loads(request.body.decode('utf-8'))
        message = data.get('message', {})

        if 'text' in message:
            chat_id = message['chat']['id']
            message_text = message['text']
            first_name = message['from'].get('first_name', '')

            if 'text' in message and message['text'] == '/start':
                send_welcome_message(chat_id)

            if message_text == '/vhod':
                username = f"tg_{chat_id}"
                user, user_created = User.objects.get_or_create(username=username)

                if user_created:
                    user.set_password(secrets.token_urlsafe(16))  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
                user.first_name = first_name  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—Ö–æ–¥–µ
                user.save()

                telegram_profile, profile_created = TelegramProfile.objects.get_or_create(
                    user=user,
                    defaults={'chat_id': chat_id}
                )

                secure_token = generate_and_save_user_token(telegram_profile)
                login_url = f'{BASE_URL}/login/?token={secure_token}'
                send_telegram_message(chat_id, f'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç: {login_url}')
                return JsonResponse({'status': 'success'})

        return JsonResponse({})
    else:
        return HttpResponseNotAllowed(['POST'])


def login_by_token(request):
    token = request.GET.get('token')
    if not token:
        return HttpResponse('–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω', status=400)

    try:
        telegram_profile = TelegramProfile.objects.get(token=token)
        user = telegram_profile.user
        login(request, user)  # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        UserLogin.objects.create(user=user)  # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –≤—Ö–æ–¥–µ –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
        return redirect('/')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    except TelegramProfile.DoesNotExist:
        return HttpResponse('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω', status=400)


